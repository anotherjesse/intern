#!/usr/bin/env python

#   Copyright 2010-2011 Josh Kearney
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

"""intern - do work for me (run my scripts in the cloud)."""

import logging
import os
import sys
import time


INTERN_PATH = os.path.normpath(os.path.join(
        os.path.abspath(sys.argv[0]), os.pardir, os.pardir))
if os.path.exists(os.path.join(INTERN_PATH, "intern", "__init__.py")):
    sys.path.insert(0, INTERN_PATH)


from intern import cloud
from intern import utils
from intern import version
from intern import watch


from cliff import app
from cliff import command
from cliff import commandmanager
from cliff import lister


__VERSION__ = version.version_string()


class ListServers(lister.Lister):
    """Show the virtual machines"""

    log = logging.getLogger(__name__)

    def take_action(self, parsed_args):
        columns = ('name', 'status', 'network')

        results = []
        for s in cloud.find():
            results.append([s.name, s.status, s.ips])
        return (columns, results)


class Watcher(command.Command):
    """Gource it up baby"""

    log = logging.getLogger(__name__)

    def get_parser(self, name):
        parser = super(Watcher, self).get_parser(name)
        parser.add_argument('delay', nargs='?', default=1)
        return parser

    def take_action(self, parsed_args):
        vms = {}
        while True:
            watch.update_vms(vms)
            time.sleep(parsed_args.delay)


class BuildRC(command.Command):
    """Boot a new VM"""

    log = logging.getLogger(__name__)

    def get_parser(self, name):
        parser = super(BuildRC, self).get_parser(name)
        parser.add_argument('--admin', action='store_true', default=False)
        return parser

    def take_action(self, parsed_args):
        CONF = utils.load_config("global")
        if parsed_args.admin:
            CREDS = utils.load_config("admin")
        else:
            CREDS = utils.load_config("user")

        print 'export OS_USERNAME=%s' % CREDS.get('user')
        print 'export OS_PASSWORD=%s' % CREDS.get('password')
        print 'export OS_TENANT_NAME=%s' % CREDS.get('tenant')
        print 'export OS_AUTH_URL=%s' % CONF.get('auth_endpoint')


class BootServer(command.Command):
    """Boot a new VM"""

    log = logging.getLogger(__name__)

    def get_parser(self, name):
        parser = super(BootServer, self).get_parser(name)
        parser.add_argument('name', nargs=1)
        parser.add_argument('image', nargs='?', default='quantal')
        parser.add_argument('--ram', nargs='?', default='2GB')
        parser.add_argument('--vcpus', nargs='?', type=int)
        parser.add_argument('--root', nargs='?', type=int)
        parser.add_argument('--ephemeral', nargs='?', type=int)
        return parser

    def take_action(self, parsed_args):
        name = parsed_args.name[0]
        self.log.info('booting %s' % name)
        properties = {}
        if parsed_args.ram:
            properties['ram'] = parsed_args.ram
        if parsed_args.vcpus:
            properties['vcpus'] = parsed_args.vcpus
        if parsed_args.root:
            properties['root'] = parsed_args.root
        if parsed_args.ephemeral:
            properties['ephemeral'] = parsed_args.ephemeral
        cloud.boot(name, parsed_args.image, properties)


class DeleteServer(command.Command):
    """destroy all servers of a specific name IF the expected quanity exists"""

    log = logging.getLogger(__name__)

    def get_parser(self, name):
        parser = super(DeleteServer, self).get_parser(name)
        parser.add_argument('name', nargs=1)
        parser.add_argument('qty', nargs='?', default=1, type=int)
        return parser

    def take_action(self, parsed_args):
        name = parsed_args.name[0]
        qty = parsed_args.qty
        cloud.delete(name, qty)


class VMApp(app.App):

    log = logging.getLogger(__name__)

    def __init__(self):
        super(VMApp, self).__init__(
                description='vm manager app',
                version='0.1',
                command_manager=commandmanager.CommandManager('vm'),
                )

    def initialize_app(self, argv):
        self.command_manager.add_command('list', ListServers)
        self.command_manager.add_command('boot', BootServer)
        self.command_manager.add_command('delete', DeleteServer)
        self.log.debug('initializing app')

    def prepare_to_run_command(self, cmd):
        self.log.debug('prepare_to_run_command %s', cmd.__class__.__name__)

    def clean_up(self, cmd, result, err):
        self.log.debug('clean_up %s', cmd.__class__.__name__)


class VMApp(app.App):

    log = logging.getLogger(__name__)

    def __init__(self):
        super(VMApp, self).__init__(
                description='vm manager app',
                version='0.1',
                command_manager=commandmanager.CommandManager('vm'),
                )

    def initialize_app(self, argv):
        self.command_manager.add_command('rc', BuildRC)
        self.command_manager.add_command('list', ListServers)
        self.command_manager.add_command('watch', Watcher)
        self.command_manager.add_command('boot', BootServer)
        self.command_manager.add_command('delete', DeleteServer)
        self.log.debug('initializing app')

    def prepare_to_run_command(self, cmd):
        self.log.debug('prepare_to_run_command %s', cmd.__class__.__name__)

    def clean_up(self, cmd, result, err):
        self.log.debug('clean_up %s', cmd.__class__.__name__)


def main(argv=sys.argv[1:]):
    app = VMApp()
    return app.run(argv)


if __name__ == '__main__':
    sys.exit(main())
